
// Enhanced emoji set with better distribution across categories for stronger encoding
const emojiSet = [
  // Extended faces and emotions - better coverage
  'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©',
  'üòò', 'üòó', '‚ò∫Ô∏è', 'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î',
  'ü§ê', 'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•', 'üòå', 'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑',
  'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥', 'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'üòé', 'ü§ì', 'üßê',
  
  // Animals with better Unicode coverage
  'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ',
  'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù',
  'üêõ', 'ü¶ã', 'üêå', 'üêû', 'üêú', 'ü¶ü', 'ü¶ó', 'üï∑Ô∏è', 'ü¶Ç', 'üê¢', 'üêç', 'ü¶é', 'ü¶ñ', 'ü¶ï', 'üêô', 'ü¶ë',
  'ü¶ê', 'ü¶û', 'ü¶Ä', 'üê°', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'ü¶à', 'üêä', 'üêÖ', 'üêÜ', 'ü¶ì', 'ü¶ç', 'ü¶ß',
  
  // Food with extended international coverage
  'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù',
  'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê',
  'ü•ñ', 'üçû', 'ü•®', 'ü•Ø', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠',
  'üçï', 'üçü', 'ü•ô', 'üåÆ', 'üåØ', 'ü•ó', 'ü•ò', 'üçù', 'üçú', 'üç≤', 'üçõ', 'üç£', 'üç±', 'ü•ü', 'ü¶™', 'üç§',
  
  // Objects and symbols with better distribution
  '‚≠ê', 'üåü', '‚ú®', '‚ö°', 'üî•', 'üíØ', 'üí´', 'üåô', '‚òÄÔ∏è', 'üåà', '‚òî', '‚ùÑÔ∏è', '‚õÑ', 'üåä', 'üíé', 'üîÆ',
  'üí∞', 'üí¥', 'üíµ', 'üí∂', 'üí∑', 'üí∏', 'üí≥', 'üèÜ', 'ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñÔ∏è', 'üèµÔ∏è', 'üéóÔ∏è', 'üé´',
  'üé™', 'üé®', 'üé≠', 'üé™', 'üéº', 'üéµ', 'üé∂', 'üé§', 'üéß', 'üìª', 'üé∑', 'üé∏', 'üéπ', 'üé∫', 'üéª', 'ü™ï',
  'üéØ', 'üé≥', 'üéÆ', 'üé∞', 'üß©', 'üÉè', 'üÄÑ', 'üé¥', 'üé≤', '‚ô†Ô∏è', '‚ô•Ô∏è', '‚ô¶Ô∏è', '‚ô£Ô∏è', 'üéä', 'üéâ', 'üéà',
  
  // Activities and sports
  '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±', 'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç',
  'üèè', 'ü™É', 'ü•Ö', '‚õ≥', 'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', '‚õ∏Ô∏è', 'ü•å', 'üéø',
  
  // Extended symbols for better security
  'üîê', 'üîë', 'üóùÔ∏è', 'üîí', 'üîì', 'üîè', 'üîé', 'üîç', 'üí°', 'üî¶', 'üèÆ', 'ü™î', 'üì±', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è',
  'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è'
];

// Enhanced salt generation for stronger security
const generateSalt = (password: string): string => {
  let salt = '';
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  
  for (let i = 0; i < password.length; i++) {
    const charCode = password.charCodeAt(i);
    const saltIndex = (charCode * 7 + i * 13) % chars.length;
    salt += chars[saltIndex];
  }
  return salt;
};

// Strengthened emoji encoding with multiple layers of security
export const encodeWithEmojis = (text: string): string => {
  console.log('üîÑ Starting enhanced emoji encoding for text:', text.substring(0, 50) + '...');
  
  try {
    // Convert text to UTF-8 bytes for universal language support
    const encoder = new TextEncoder();
    const bytes = encoder.encode(text);
    
    // Apply XOR transformation for additional security
    const transformedBytes = Array.from(bytes).map((byte, index) => {
      return byte ^ (index % 256); // XOR with position-based key
    });
    
    // Convert to base64 for stable intermediate representation
    const base64 = btoa(String.fromCharCode(...transformedBytes));
    console.log('üî¢ Base64 intermediate length:', base64.length);
    
    let encoded = '';
    
    // Enhanced mapping: each character maps to 2 emojis for better security
    for (let i = 0; i < base64.length; i++) {
      const charCode = base64.charCodeAt(i);
      
      // First emoji based on character code
      const firstIndex = charCode % emojiSet.length;
      // Second emoji based on position and character code
      const secondIndex = (charCode + i * 17) % emojiSet.length;
      
      encoded += emojiSet[firstIndex] + emojiSet[secondIndex];
    }
    
    console.log('‚úÖ Enhanced emoji encoded result length:', encoded.length);
    return encoded;
  } catch (error) {
    console.error('‚ùå Enhanced emoji encoding error:', error);
    return 'Encoding failed - invalid characters detected';
  }
};

// Strengthened emoji decoding
export const decodeFromEmojis = (emojiText: string): string => {
  console.log('üîÑ Starting enhanced emoji decoding for text length:', emojiText.length);
  
  try {
    const emojiArray = Array.from(emojiText);
    
    // Ensure we have pairs of emojis
    if (emojiArray.length % 2 !== 0) {
      console.error('‚ùå Invalid emoji message: odd number of emojis');
      return 'Invalid emoji message format';
    }
    
    let base64 = '';
    
    // Decode pairs of emojis back to characters
    for (let i = 0; i < emojiArray.length; i += 2) {
      const firstEmoji = emojiArray[i];
      const secondEmoji = emojiArray[i + 1];
      
      const firstIndex = emojiSet.indexOf(firstEmoji);
      const secondIndex = emojiSet.indexOf(secondEmoji);
      
      if (firstIndex === -1 || secondIndex === -1) {
        console.error('‚ùå Unknown emoji found');
        return 'Invalid emoji characters in encoded message';
      }
      
      // Reverse the encoding: find character that produces these two emojis
      for (let charCode = 32; charCode <= 126; charCode++) {
        const expectedFirst = charCode % emojiSet.length;
        const expectedSecond = (charCode + (i / 2) * 17) % emojiSet.length;
        
        if (expectedFirst === firstIndex && expectedSecond === secondIndex) {
          base64 += String.fromCharCode(charCode);
          break;
        }
      }
    }
    
    console.log('üî¢ Reconstructed base64 length:', base64.length);
    
    // Convert base64 back to bytes
    const binaryString = atob(base64);
    const transformedBytes = Array.from(binaryString).map(char => char.charCodeAt(0));
    
    // Reverse XOR transformation
    const originalBytes = transformedBytes.map((byte, index) => {
      return byte ^ (index % 256);
    });
    
    // Convert back to UTF-8 text
    const decoder = new TextDecoder('utf-8');
    const decodedText = decoder.decode(new Uint8Array(originalBytes));
    
    console.log('‚úÖ Enhanced emoji decoding complete');
    return decodedText;
  } catch (error) {
    console.error('‚ùå Enhanced emoji decoding error:', error);
    return 'Decoding failed - corrupted emoji message';
  }
};

// Enhanced password encoding with stronger cryptographic approach
export const applyPasswordEncoding = (text: string, key: string): string => {
  console.log('üîê Applying enhanced password encoding');
  
  try {
    const salt = generateSalt(key);
    const combinedKey = key + salt;
    
    // Convert to UTF-8 bytes for universal language support
    const encoder = new TextEncoder();
    const textBytes = encoder.encode(text);
    const keyBytes = encoder.encode(combinedKey);
    
    // Apply multiple rounds of encryption-like transformation
    let encoded = Array.from(textBytes);
    
    // Round 1: XOR with expanded key
    for (let i = 0; i < encoded.length; i++) {
      const keyByte = keyBytes[i % keyBytes.length];
      encoded[i] = encoded[i] ^ keyByte;
    }
    
    // Round 2: Position-based transformation
    for (let i = 0; i < encoded.length; i++) {
      encoded[i] = (encoded[i] + i * 7 + keyBytes.length) % 256;
    }
    
    // Round 3: Reverse XOR with different key pattern
    for (let i = 0; i < encoded.length; i++) {
      const keyByte = keyBytes[(i * 3) % keyBytes.length];
      encoded[i] = encoded[i] ^ keyByte;
    }
    
    // Convert to base64 for safe transmission
    const result = btoa(String.fromCharCode(...encoded));
    console.log('‚úÖ Enhanced password encoding complete, length:', result.length);
    return result;
  } catch (error) {
    console.error('‚ùå Enhanced password encoding error:', error);
    return 'Password encoding failed';
  }
};

// Enhanced password decoding
export const applyPasswordDecoding = (encodedText: string, key: string): string => {
  console.log('üîê Applying enhanced password decoding');
  
  try {
    const salt = generateSalt(key);
    const combinedKey = key + salt;
    
    // Decode from base64
    const binaryString = atob(encodedText);
    let encoded = Array.from(binaryString).map(char => char.charCodeAt(0));
    
    const encoder = new TextEncoder();
    const keyBytes = encoder.encode(combinedKey);
    
    // Reverse Round 3: Reverse XOR with different key pattern
    for (let i = 0; i < encoded.length; i++) {
      const keyByte = keyBytes[(i * 3) % keyBytes.length];
      encoded[i] = encoded[i] ^ keyByte;
    }
    
    // Reverse Round 2: Position-based transformation
    for (let i = 0; i < encoded.length; i++) {
      encoded[i] = (encoded[i] - i * 7 - keyBytes.length + 256 * 256) % 256;
    }
    
    // Reverse Round 1: XOR with expanded key
    for (let i = 0; i < encoded.length; i++) {
      const keyByte = keyBytes[i % keyBytes.length];
      encoded[i] = encoded[i] ^ keyByte;
    }
    
    // Convert back to UTF-8 text
    const decoder = new TextDecoder('utf-8');
    const decodedText = decoder.decode(new Uint8Array(encoded));
    
    console.log('‚úÖ Enhanced password decoding complete');
    return decodedText;
  } catch (error) {
    console.error('‚ùå Enhanced password decoding error:', error);
    return 'Invalid password or corrupted message';
  }
};

// Main encoding function with enhanced security
export const encodeMessage = (text: string, key: string, method: string): string => {
  if (!text || !key) return '';
  
  console.log('üöÄ Enhanced encoding with method:', method, 'Text length:', text.length, 'Languages supported: All Unicode');
  
  try {
    if (method === 'emoji') {
      // For emoji: password encode first, then convert to emojis
      const passwordEncoded = applyPasswordEncoding(text, key);
      return encodeWithEmojis(passwordEncoded);
    }
    
    // For text: enhanced password encoding only
    return applyPasswordEncoding(text, key);
  } catch (error) {
    console.error('‚ùå Enhanced encoding failed:', error);
    return 'Encoding failed - please check your input';
  }
};

// Main decoding function with enhanced security
export const decodeMessage = (encodedText: string, key: string, method: string): string => {
  if (!encodedText || !key) return '';
  
  console.log('üöÄ Enhanced decoding with method:', method, 'Encoded length:', encodedText.length);
  
  try {
    if (method === 'emoji') {
      // For emoji: decode from emojis first, then password decode
      const emojiDecoded = decodeFromEmojis(encodedText);
      if (emojiDecoded.includes('Invalid') || emojiDecoded.includes('failed') || emojiDecoded.includes('Decoding failed')) {
        return emojiDecoded;
      }
      return applyPasswordDecoding(emojiDecoded, key);
    }
    
    // For text: enhanced password decoding only
    return applyPasswordDecoding(encodedText, key);
  } catch (error) {
    console.error('‚ùå Enhanced decoding failed:', error);
    return 'Decoding failed - invalid message or wrong password';
  }
};
